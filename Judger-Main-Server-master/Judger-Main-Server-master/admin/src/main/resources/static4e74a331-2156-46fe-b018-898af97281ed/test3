<알고리즘>
1. 그리디알고리즘:  여러 경우 중 하나를 결정해야 할 때마다 그 순간에 최적이라고 생각되는 것을 선택해 나가는 방식
ex) 거스름 돈 문제: 무조건 더 큰 화폐 단위부터 거슬러줌-> 최적의 해 보장

2. DFS (깊이우선탐색)
스택을 사용 or 재귀함수를 이용
1. a 노드(시작 노드)를 방문한다.
-방문한 노드는 방문했다고 표시한다.
2. a와 인접한 노드들을 차례로 순회한다.
-a와 인접한 노드가 없다면 종료한다.
3. a와 이웃한 노드 b를 방문했다면, a와 인접한 또 다른 노드를 방문하기 전에 b의 이웃 노드들을 전부 방문해야 한다.
-b를 시작 정점으로 DFS를 다시 시작하여 b의 이웃 노드들을 방문한다.
4. b의 분기를 전부 완벽하게 탐색했다면 다시 a에 인접한 정점들 중에서 아직 방문이 안 된 정점을 찾는다.
- 즉, b의 분기를 전부 완벽하게 탐색한 뒤에야 a의 다른 이웃 노드를 방문할 수 있다는 뜻이다.
- 아직 방문이 안 된 정점이 없으면 종료한다.
9 있으면 다시 그 정점을 시작 정점으로 DFS를 시작한다.
https://gmlwjd9405.github.io/2018/08/14/algorithm-dfs.html

		
		1
	      2	ㅡ     3
              4  ㅡ   5 6 ㅡ   7

방문경로 1->2->3->6->7->4->5

3. BFS (너비우선탐색)
1. a 노드(시작 노드)를 방문한다. (방문한 노드 체크)
-큐에 방문된 노드를 삽입(enqueue)한다.
-초기 상태의 큐에는 시작 노드만이 저장
-즉, a 노드의 이웃 노드를 모두 방문한 다음에 이웃의 이웃들을 방문한다.
2. 큐에서 꺼낸 노드과 인접한 노드들을 모두 차례로 방문한다.
-큐에서 꺼낸 노드를 방문한다.
-큐에서 커낸 노드과 인접한 노드들을 모두 방문한다.
-인접한 노드가 없다면 큐의 앞에서 노드를 꺼낸다(dequeue).
-큐에 방문된 노드를 삽입(enqueue)한다.
3. 큐가 소진될 때까지 계속한다.
https://gmlwjd9405.github.io/2018/08/15/algorithm-bfs.html

큐를 사용 
맨처음에 시작노드를 큐에 삽입하면서 시작, 시작노드를 방문했다고 방문처리
<알고리즘>
큐에서 하나의 코드를 꺼냅니다.
해당 노드에 연결된 노드중 방문하지 않은 노드를 방문하고 차례대로 큐에 삽입합니다.

		1
	      2	     3
              4     5	   6    7

방문경로 1->2->3->4->5->6->7
